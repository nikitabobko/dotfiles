#!/usr/bin/env bash
set -e # Exit if one of commands exit with non-zero exit code
set -u # Treat unset variables and parameters other than the special parameters ‘@’ or ‘*’ as an error
set -o pipefail # Any command failed in the pipe fails the whole pipe
# set -v # Print shell input lines as they are read (You may also try -x which is more verbose)

VERSION=232

# if [ $# -lt 1 ]; then
#     echo "Usage: idea xxx [other args]"
#     exit 1
# fi

cat <<EOF | tee $(for x in ~/.config/JetBrains/*Idea*; do echo $x/idea.properties; done) > /dev/null
idea.is.internal=true
EOF

# https://youtrack.jetbrains.com/issue/IDEA-299903
path=""
if [ $# -gt 0 ]; then
    path=$(realpath "$1")
    test -e "$path" || { echo "'$path' doesn't exist" && exit 1; }
    shift # Drop second argument
fi

candidates="$(find ~/.local/share/JetBrains/Toolbox/apps/IDEA-U -name idea.sh | grep $VERSION | sort -Vr)"
idea_sh=$(head -1 <<< "$candidates")

echo "Candidates:"
echo "$candidates"
echo "---"
echo "Selected: $idea_sh"

if [ -z "$path" ]; then
    detach "$idea_sh" "$@"
else
    detach "$idea_sh" "$path" "$@"
fi

# version="$1"
# shift # Drop first argument

# # https://youtrack.jetbrains.com/issue/IDEA-299903
# path=""
# if [ $# -gt 0 ]; then
#     path=$(realpath "$1")
#     test -e "$path" || { echo "'$path' doesn't exist" && exit 1; }
#     shift # Drop second argument
# fi

# if [ $# -gt 0 ]; then
#     echo "Usage: i <VERSION-PATTERN> [OPTIONAL-FILE]"
#     exit 1
# fi

# find_installed_idea_sh() {
#     find ~/.local/share/JetBrains/Toolbox/apps/IDEA-U -name idea.sh
#     find ~/.local/share/JetBrains/Toolbox/apps/IDEA-C -name idea.sh
#     find ~/.app -name idea.sh
# }

# installed_ideas_sorted_descending_with_versions() {
#     find_installed_idea_sh | xargs dirname | xargs dirname \
#         | while read it; do echo "$(cat $it/build.txt) $it/bin/idea.sh"; done \
#         | sort -Vr
# }

# matching=$(installed_ideas_sorted_descending_with_versions | grep "$version")
# echo "Matching versions:"
# echo "$matching"
# echo "----------------"

# picked=$(echo "$matching" | head -1 | awk '{print $2}')
# echo "Picked:"
# echo "$picked"
# echo "----------------"

# test -z "$path" &&
#     { nohup "$picked"         "$@" &> /dev/null & } ||
#     { nohup "$picked" "$path" "$@" &> /dev/null & }
